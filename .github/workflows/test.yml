name: Test CI
on:
  pull_request:
  push:
    branches:
      - "*"
  workflow_dispatch:

# The section is needed to drop write-all permissions that are granted on
# `schedule` event. By specifying any permission explicitly all others are set
# to none. By using the principle of least privilege the damage a compromised
# workflow can do (because of an injection or compromised third party tool or
# action) is restricted. Currently the worklow doesn't need any additional
# permission except for pulling the code. Adding labels to issues, commenting
# on pull-requests, etc. may need additional permissions:
#
# Syntax for this section:
# https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#permissions
#
# Reference for how to assign permissions on a job-by-job basis:
# https://docs.github.com/en/actions/using-jobs/assigning-permissions-to-jobs
#
# Reference for available permissions that we can enable if needed:
# https://docs.github.com/en/actions/security-guides/automatic-token-authentication#permissions-for-the-github_token
permissions:
  # to fetch code (actions/checkout)
  contents: read

jobs:
  test:
    name: test
    env:
      BINARY: binwalk
      # For some builds, we use cross to test on 32-bit and big-endian
      # systems.
      CARGO: cargo
      # When CARGO is set to CROSS, this is set to `--target matrix.target`.
      # Note that we only use cross on Linux, so setting a target on a
      # different OS will just use normal cargo.
      TARGET_FLAGS:
      # When CARGO is set to CROSS, TARGET_DIR includes matrix.target.
      TARGET_DIR: ./target
      # Emit backtraces on panics.
      RUST_BACKTRACE: 1
      # Disable BuildKit for cross builds
      CROSS_CONTAINER_ENGINE_NO_BUILDKIT: 1
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux builds
          - build: linux-x86_64
            os: ubuntu-latest
            rust: nightly
            target: x86_64-unknown-linux-gnu
            strip: x86_64-linux-gnu-strip
          - build: linux-aarch64
            os: ubuntu-latest
            rust: stable
            target: aarch64-unknown-linux-gnu
            strip: aarch64-linux-gnu-strip
          - build: linux-powerpc64le
            os: ubuntu-latest
            rust: stable
            target: powerpc64le-unknown-linux-gnu
            strip: powerpc64le-linux-gnu-strip
          - build: linux-s390x
            os: ubuntu-latest
            rust: stable
            target: s390x-unknown-linux-gnu
            strip: s390x-linux-gnu-strip
          - build: linux-riscv64
            os: ubuntu-latest
            rust: stable
            target: riscv64gc-unknown-linux-gnu
            strip: riscv64-linux-gnu-strip

          # Android builds
          - build: android-x86_64
            os: ubuntu-latest
            rust: stable
            target: x86_64-linux-android
            strip: x86_64-linux-android-strip
          - build: android-aarch64
            os: ubuntu-latest
            rust: stable
            target: aarch64-linux-android
            strip: aarch64-linux-android-strip

          # macOS builds
          - build: macos-x86_64
            os: macos-latest
            rust: nightly
            target: x86_64-apple-darwin
          - build: macos-aarch64
            os: macos-latest
            rust: nightly
            target: aarch64-apple-darwin

          # Windows builds
          - build: windows-x86_64
            os: windows-latest
            rust: nightly
            target: x86_64-pc-windows-msvc
          - build: windows-aarch64
            os: windows-latest
            rust: nightly
            target: aarch64-pc-windows-msvc
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install CI packages (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        shell: bash
        run: |
          ./dependencies/ci-packages.sh

      - name: Install Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust }}

      - name: Use Cross (git)
        if: matrix.os == 'ubuntu-latest' && matrix.target != ''
        run: |
          cargo install cross --git https://github.com/cross-rs/cross --rev 4090beca3cfffa44371a5bba524de3a578aa46c3
          echo "CARGO=cross" >> $GITHUB_ENV
          echo "TARGET_FLAGS=--target ${{ matrix.target }}" >> $GITHUB_ENV
          echo "TARGET_DIR=./target/${{ matrix.target }}" >> $GITHUB_ENV

      - name: Show command used for Cargo
        run: |
          echo "cargo command is: ${{ env.CARGO }}"
          echo "target flag is: ${{ env.TARGET_FLAGS }}"
          echo "target dir is: ${{ env.TARGET_DIR }}"

      - name: Build binary
        run: ${{ env.CARGO }} build --verbose --workspace ${{ env.TARGET_FLAGS }}

      - name: Show build stderr
        shell: bash
        run: |
          set +x
          stderr="$(find "${{ env.TARGET_DIR }}/debug" -name stderr -print0 | xargs -0 ls -t | head -n1)"
          if [ -s "$stderr" ]; then
            echo "===== $stderr ===== "
            cat "$stderr"
            echo "====="
          fi
          set -x
